{"version":3,"sources":["models/entry.data.ts","components/entries-list.component.tsx","components/entry.component.tsx","firebase.ts","services/entries.service.ts","routing.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EntryType","EntriesList","entries","poems","stories","forEach","entry","type","Poem","push","Story","className","id","style","backgroundImage","map","el","i","to","slug","title","Entry","useParams","entryIndex","findIndex","next","length","prev","image","dangerouslySetInnerHTML","__html","sanitizeHtml","content","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","a","_init","db","firestore","collection","orderBy","get","querySnapshot","docs","doc","data","sort","b","localeCompare","Routing","useState","setEntries","useEffect","getEntries","then","exact","path","children","App","Date","getFullYear","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a46e2f1.chunk.js","sourcesContent":["export enum EntryType {\n  Poem = 'poem',\n  Story = 'story'\n}\n\nexport interface EntryData {\n  id: string;\n  slug: string;\n  title: string;\n  content: string;\n  created: string;\n  image: string;\n  type: EntryType;\n}","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { EntryData, EntryType } from '../models/entry.data';\n\ninterface EntriesListProps {\n  entries: EntryData[]\n}\nconst EntriesList: FC<EntriesListProps> = ({entries}) => {\n  const poems: EntryData[] = [];\n  const stories: EntryData[] = [];\n\n  entries.forEach(entry => {\n    switch (entry.type) {\n      case EntryType.Poem:\n        poems.push(entry);\n        break;\n      case EntryType.Story:\n        stories.push(entry);\n        break;\n      default:\n        break;\n    }\n  })\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"left-side\">\n        <h1 id=\"header\">Słowa</h1>\n        <div className=\"entry-image\" style={{ backgroundImage: `url(https://live.staticflickr.com/8459/7995927080_2d64aa9088_c.jpg)` }}></div>\n      </div>\n      <div className=\"right-side\">\n        <div id=\"main\">\n          <div id=\"content\">\n            <h2>Poezja</h2>\n            <ul>\n              {poems?.map((el, i) => (<li key={i}><Link to={'/'+el.slug}>{el.title}</Link></li>))}\n            </ul>\n            <h2>Proza</h2>\n            <ul>\n              {stories?.map((el, i) => (<li key={i}><Link to={'/'+el.slug}>{el.title}</Link></li>))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EntriesList;","import { FC } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { EntryData } from '../models/entry.data';\nimport sanitizeHtml from 'sanitize-html';\n\ninterface EntryProps {\n  entries: EntryData[]\n}\n\nconst Entry: FC<EntryProps> = ({ entries }) => {\n  const { slug } = useParams() as { slug: string };\n  const entryIndex = entries.findIndex(el => el.slug === slug);\n  const entry = entries[entryIndex];\n  const next = entries[entryIndex < entries.length - 1 ? entryIndex + 1 : 0];\n  const prev = entries[entryIndex > 0 ? entryIndex - 1 : entries.length - 1];\n\n  return (\n    <>{\n      entry &&\n      <>\n        <div className=\"left-side\">\n          <div className=\"home-link\"><Link to={'/'}>słowa</Link></div>\n          <h2 id=\"header\">{entry.title}</h2>\n          <div className=\"entry-image\" style={{ backgroundImage: `url(${entry.image})` }}></div>\n        </div>\n        <div className=\"right-side\">\n          <div id=\"main\">\n            <div id=\"content\">\n              <div className=\"entry-text\" dangerouslySetInnerHTML={{ __html: sanitizeHtml(entry.content) }}></div>\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <Link to={'/' + (prev?.slug)} title={prev.title} className=\"button\"> &#8249; </Link>\n            <span>{entryIndex + 1}</span>\n            <Link to={'/' + (next?.slug)} title={next.title} className=\"button\"> &#8250; </Link>\n          </div>\n        </div>\n      </>\n    }</>\n  );\n}\n\nexport default Entry;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n  apiKey: process.env.REACT_APP_APIKEY,\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\n  databaseURL: process.env.REACT_APP_DB,\n  projectId: process.env.REACT_APP_PID,\n  storageBucket: process.env.REACT_APP_SB,\n  messagingSenderId: process.env.REACT_APP_SID,\n  appId: process.env.REACT_APP_APPID\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import firebase from '../firebase';\nimport { EntryData } from '../models/entry.data';\n\nlet entries: EntryData[];\n\nexport async function get(): Promise<EntryData[]> {\n  if (!entries) {\n    await _init();\n  }\n  return entries;\n}\n\nexport async function fetch(id: string): Promise<EntryData | null> {\n  if (!entries) {\n    await _init();\n  }\n  return entries?.find(el => el.id === id) || null;\n}\n\nasync function _init() {\n  const db = firebase.firestore();\n  const querySnapshot = await db.collection('poems').orderBy('created', 'desc').get();\n  entries = querySnapshot?.docs.map((doc) => ({id: doc.id, ...doc.data()} as EntryData)).sort((a, b) => a.type.localeCompare(b.type));\n}\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Entries from './components/entries-list.component';\nimport Entry from './components/entry.component';\nimport { useEffect, useState } from 'react';\nimport { EntryData } from './models/entry.data';\nimport { get as getEntries } from './services/entries.service';\n\nexport default function Routing() {\n  const [entries, setEntries] = useState<EntryData[]>([]);\n\n  useEffect(() => {\n    getEntries().then(setEntries);\n  }, []);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\"><Entries entries={entries} /></Route>\n        <Route exact path=\"/:slug\" children={<Entry entries={entries} />} />\n      </Switch>\n    </Router>\n  );\n}","import React from 'react';\nimport './App.scss';\nimport Routing from './routing';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Routing />\n      <div id=\"footer\">\n        &copy;{new Date().getFullYear()} <a href=\"https://www.facebook.com/anna.chotoborska\" target=\"_blank\" rel=\"noreferrer\">Reien</a>.\n        Grafiki: <a href=\"https://www.flickr.com/photos/biodivlibrary/\" target=\"_blank\" rel=\"noreferrer\">BHL</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}